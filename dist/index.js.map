{"version":3,"sources":["../src/actions/post.ts","../src/templates.ts","../src/types.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    composeContext,\n    elizaLogger,\n    ModelClass,\n    generateObject,\n    messageCompletionFooter,\n    HandlerCallback,\n    truncateToCompleteSentence,\n} from \"@elizaos/core\";\nimport { Scraper } from \"agent-twitter-client\";\nimport { tweetTemplate } from \"../templates\";\nimport { isTweetContent, TweetMetadata, TweetSchema } from \"../types\";\n\nexport const DEFAULT_MAX_TWEET_LENGTH = 280;\n\nasync function composeTweet(\n    runtime: IAgentRuntime,\n    _message: Memory,\n    state?: State\n): Promise<string> {\n    try {\n        const context = composeContext({\n            state,\n            template: tweetTemplate + `\\n${messageCompletionFooter}`,\n        });\n\n        const tweetContentObject = await generateObject({\n            runtime,\n            context,\n            modelClass: ModelClass.SMALL,\n            schema: TweetSchema,\n            stop: [\"\\n\"],\n        });\n\n        if (!isTweetContent(tweetContentObject.object)) {\n            elizaLogger.error(\n                \"Invalid tweet content:\",\n                tweetContentObject.object\n            );\n            return;\n        }\n\n        let trimmedContent = tweetContentObject.object.text.trim();\n\n        // Truncate the content to the maximum tweet length specified in the environment settings.\n        const maxTweetLength = runtime.getSetting(\"MAX_TWEET_LENGTH\");\n        if (maxTweetLength) {\n            trimmedContent = truncateToCompleteSentence(\n                trimmedContent,\n                Number(maxTweetLength)\n            );\n        }\n\n        return trimmedContent;\n    } catch (error) {\n        elizaLogger.error(\"Error composing tweet:\", error);\n        throw error;\n    }\n}\n\nasync function sendTweet(twitterClient: Scraper, content: string) {\n    const result = await twitterClient.sendTweet(content);\n\n    const body = await result.json();\n    elizaLogger.log(\"Tweet response:\", body);\n\n    // Check for Twitter API errors\n    if (body.errors) {\n        const error = body.errors[0];\n        elizaLogger.error(\n            `Twitter API error (${error.code}): ${error.message}`\n        );\n        return null;\n    }\n\n    // Check for successful tweet creation\n    if (!body?.data?.create_tweet?.tweet_results?.result) {\n        elizaLogger.error(\"Failed to post tweet: No tweet result in response\");\n        return null;\n    }\n\n    return body;\n}\n\nasync function postTweet(\n    runtime: IAgentRuntime,\n    content: string\n): Promise<TweetMetadata | null> {\n    try {\n        const twitterClient = runtime.clients.twitter?.client?.twitterClient;\n        const scraper = twitterClient || new Scraper();\n\n        if (!twitterClient) {\n            const username = runtime.getSetting(\"TWITTER_USERNAME\");\n            const password = runtime.getSetting(\"TWITTER_PASSWORD\");\n            const email = runtime.getSetting(\"TWITTER_EMAIL\");\n            const twitter2faSecret = runtime.getSetting(\"TWITTER_2FA_SECRET\");\n\n            if (!username || !password) {\n                elizaLogger.error(\n                    \"Twitter credentials not configured in environment\"\n                );\n                return null;\n            }\n            // Login with credentials\n            await scraper.login(username, password, email, twitter2faSecret);\n            if (!(await scraper.isLoggedIn())) {\n                elizaLogger.error(\"Failed to login to Twitter\");\n                return null;\n            }\n        }\n\n        // Send the tweet\n        elizaLogger.log(\"Attempting to send tweet:\", content);\n\n        try {\n            let res = null;\n            if (content.length > DEFAULT_MAX_TWEET_LENGTH) {\n                res = await scraper.sendNoteTweet(content);\n                elizaLogger.debug(\"Note tweet result:\", res);\n                if (res.errors && res.errors.length > 0) {\n                    // Note Tweet failed due to authorization. Falling back to standard Tweet.\n                    res = await sendTweet(scraper, content);\n                } else {\n                    return null;\n                }\n            } else {\n                res = await sendTweet(scraper, content);\n            }\n            return {\n                userName:\n                res?.data?.create_tweet?.tweet_results?.result?.core\n                    ?.user_results?.result?.legacy?.screen_name,\n                id: res?.data?.create_tweet?.tweet_results?.result?.rest_id,\n            };\n        } catch (error) {\n            throw new Error(`Note Tweet failed: ${error}`);\n        }\n    } catch (error) {\n        // Log the full error details\n        elizaLogger.error(\"Error posting tweet:\", {\n            message: error.message,\n            stack: error.stack,\n            name: error.name,\n            cause: error.cause,\n        });\n        return null;\n    }\n}\n\nexport const postAction: Action = {\n    name: \"POST_TWEET\",\n    similes: [\"TWEET\", \"POST\", \"SEND_TWEET\"],\n    description: \"Post a tweet to Twitter\",\n    validate: async (\n        runtime: IAgentRuntime,\n        // eslint-disable-next-line\n        _message: Memory,\n        // eslint-disable-next-line\n        _state?: State\n    ) => {\n        const username = runtime.getSetting(\"TWITTER_USERNAME\");\n        const password = runtime.getSetting(\"TWITTER_PASSWORD\");\n        const email = runtime.getSetting(\"TWITTER_EMAIL\");\n        const hasCredentials = !!username && !!password && !!email;\n        elizaLogger.log(`Has credentials: ${hasCredentials}`);\n\n        return hasCredentials;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state?: State,\n        options?: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            // Generate tweet content using context\n            const tweetContent = await composeTweet(runtime, message, state);\n\n            if (!tweetContent) {\n                elizaLogger.error(\"No content generated for tweet\");\n                callback({\n                    text: null,\n                    model: null,\n                    tweetId: null,\n                    url: null,\n                });\n                return false;\n            }\n\n            elizaLogger.log(`Generated tweet content: ${tweetContent}`);\n\n            // Check for dry run mode - explicitly check for string \"true\"\n            if (\n                process.env.TWITTER_DRY_RUN &&\n                process.env.TWITTER_DRY_RUN.toLowerCase() === \"true\"\n            ) {\n                elizaLogger.info(\n                    `Dry run: would have posted tweet: ${tweetContent}`\n                );\n                callback({\n                    text: null,\n                    model: null,\n                    tweetId: null,\n                    url: null,\n                });\n                return true;\n            }\n\n            const result = await postTweet(runtime, tweetContent);\n            if (result) {\n                callback({\n                    text: tweetContent,\n                    model: runtime.modelProvider,\n                    id: result.id,\n                    userName: result.userName,\n                });\n            } else {\n                callback({\n                    text: null,\n                    model: null,\n                    tweetId: null,\n                    url: null,\n                });\n            }\n            return !!result;\n        } catch (error) {\n            elizaLogger.error(\"Error in post action:\", error);\n            callback({\n                text: null,\n                model: null,\n                tweetId: null,\n                url: null,\n            });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"You should tweet that\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll share this update with my followers right away!\",\n                    action: \"POST_TWEET\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Post this tweet\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll post that as a tweet now.\",\n                    action: \"POST_TWEET\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Share that on Twitter\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll share this message on Twitter.\",\n                    action: \"POST_TWEET\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Post that on X\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll post this message on X right away.\",\n                    action: \"POST_TWEET\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"You should put that on X dot com\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll put this message up on X.com now.\",\n                    action: \"POST_TWEET\",\n                },\n            },\n        ],\n    ],\n};\n","export const tweetTemplate = `\n# Context\n{{recentMessages}}\n\n# Topics\n{{topics}}\n\n# Post Directions\n{{postDirections}}\n\n# Recent interactions between {{agentName}} and other users:\n{{recentPostInteractions}}\n\n# Task\nGenerate a tweet that:\n1. Relates to the recent conversation or requested topic\n2. Matches the character's style and voice\n3. Is concise and engaging\n4. Must be UNDER 180 characters (this is a strict requirement)\n5. Speaks from the perspective of {{agentName}}\n\nGenerate only the tweet text, no other commentary.\n\nReturn the tweet in JSON format like: {\"text\": \"your tweet here\"}`;\n","import { z } from \"zod\";\n\nexport interface TweetContent {\n    text: string;\n}\n\nexport interface TweetMetadata {\n    id: string;\n    userName: string;\n}\n\nexport const TweetSchema = z.object({\n    text: z.string().describe(\"The text of the tweet\"),\n});\n\nexport const isTweetContent = (obj: unknown): obj is TweetContent => {\n    return TweetSchema.safeParse(obj).success;\n};\n","import type { Plugin } from \"@elizaos/core\";\nimport { postAction } from \"./actions/post\";\n\nexport const twitterPlugin: Plugin = {\n    name: \"twitter\",\n    description: \"Twitter integration plugin for posting tweets\",\n    actions: [postAction],\n    evaluators: [],\n    providers: [],\n};\n\nexport default twitterPlugin;\n"],"mappings":"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","names":[]}